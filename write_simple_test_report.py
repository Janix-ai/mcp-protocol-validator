#!/usr/bin/env python3
"""
Directly write a simple test report in markdown format.
This script intentionally avoids using pytest plugins and
simply creates a basic file to ensure writing to the reports directory works.
"""

import os
import sys
import datetime
import argparse

def main():
    parser = argparse.ArgumentParser(description="Write a simple markdown report")
    parser.add_argument(
        "--output-dir",
        default="md_reports",
        help="Directory to write the report to"
    )
    
    args = parser.parse_args()
    
    # Create the output directory if it doesn't exist
    os.makedirs(args.output_dir, exist_ok=True)
    print(f"Created directory: {args.output_dir}")
    
    # Create a report filename with timestamp
    now = datetime.datetime.now()
    timestamp = now.strftime("%Y%m%d_%H%M%S")
    report_path = os.path.join(args.output_dir, f"test_report_{timestamp}.md")
    
    # Create the content for the report
    report_content = f"""# Simple Test Report

*Generated on {now.strftime("%Y-%m-%d at %H:%M:%S")}*

## Overview

This is a simple test report generated directly to verify file writing works
in the desired directory. This report was not generated by pytest but is
just a simple file to demonstrate that we can write to the specified directory.

## System Information

- Current working directory: {os.getcwd()}
- Python version: {sys.version}
- Output directory: {args.output_dir}
- Report path: {report_path}

## Next Steps

Once we've verified that this report is successfully written, we can
focus on enhancing our test_stdio_server.py script to generate more
comprehensive reports in Markdown format directly, without relying on
the pytest-md plugin.
"""
    
    # Write the report to file
    try:
        with open(report_path, "w") as f:
            f.write(report_content)
        
        # Verify the file was created
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            print(f"Successfully created report: {report_path}")
            print(f"File size: {file_size} bytes")
        else:
            print(f"ERROR: File was not created: {report_path}")
            return 1
            
        # List all files in the directory
        print(f"\nContents of {args.output_dir}:")
        for item in os.listdir(args.output_dir):
            item_path = os.path.join(args.output_dir, item)
            if os.path.isfile(item_path):
                print(f"  - {item} ({os.path.getsize(item_path)} bytes)")
        
        return 0
    except Exception as e:
        print(f"Error creating report: {str(e)}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 